type User {
  id: ID!
  fullName: String!
  email: String!
  role: UserRole!
}

enum UserRole {
  STUDENT
  LECTURER
}

type CourseClass {
  id: ID!
  className: String!
  courseName: String!
  numberOfStudent: Int!
  status: CourseClassStatus!
  classMonitor: User!
  lecturer: User!
  students: [User]!
}

enum CourseClassStatus {
  OPEN
  CLOSE
}

type Query {
  profile: User
  courseClass(id: ID!): CourseClass
  lecturerCourseClasses(filter: CourseClassFilter): [CourseClass]
  studentCourseClasses: [CourseClass]
  openCourseClasses: [CourseClass]
}

type Mutation {
  login(email: String!, password: String!): LoginResponse
  signUp(userInput: UserInput!): Response
  logout: Response
  editProfile(userUpdateInput: UserUpdateInput!): Response

  createCourseClass(createCourseClassInput: CreateCourseClassInput!): Response
  deleteCourseClass(id: ID!): Response
  updateCourseClass(id: ID!, updateCourseClassInput: UpdateCourseClassInput!): Response
  joinOpenCourseClass(id: ID!): Response
  leaveCourseClass(id: ID!): Response
}

type Response {
  message: String!
}

type LoginResponse {
  message: String!
  token: String
}

input UserInput {
  fullName: String
  password: String
  email: String
  role: UserRole
}

input UserUpdateInput {
  fullName: String
  oldPassword: String
  newPassword: String
}

input CreateCourseClassInput {
  className: String
  courseName: String
  emailClassMonitor: String
}

input UpdateCourseClassInput {
  className: String
  courseName: String
  emailClassMonitor: String
  status: CourseClassStatus
}

input CourseClassFilter {
  className: String
  classMonitorName: String
}
